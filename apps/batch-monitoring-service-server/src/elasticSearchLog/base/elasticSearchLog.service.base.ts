/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ElasticSearchLog as PrismaElasticSearchLog,
} from "@prisma/client";

export class ElasticSearchLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ElasticSearchLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.elasticSearchLog.count(args);
  }

  async elasticSearchLogs(
    args: Prisma.ElasticSearchLogFindManyArgs
  ): Promise<PrismaElasticSearchLog[]> {
    return this.prisma.elasticSearchLog.findMany(args);
  }
  async elasticSearchLog(
    args: Prisma.ElasticSearchLogFindUniqueArgs
  ): Promise<PrismaElasticSearchLog | null> {
    return this.prisma.elasticSearchLog.findUnique(args);
  }
  async createElasticSearchLog(
    args: Prisma.ElasticSearchLogCreateArgs
  ): Promise<PrismaElasticSearchLog> {
    return this.prisma.elasticSearchLog.create(args);
  }
  async updateElasticSearchLog(
    args: Prisma.ElasticSearchLogUpdateArgs
  ): Promise<PrismaElasticSearchLog> {
    return this.prisma.elasticSearchLog.update(args);
  }
  async deleteElasticSearchLog(
    args: Prisma.ElasticSearchLogDeleteArgs
  ): Promise<PrismaElasticSearchLog> {
    return this.prisma.elasticSearchLog.delete(args);
  }
}
