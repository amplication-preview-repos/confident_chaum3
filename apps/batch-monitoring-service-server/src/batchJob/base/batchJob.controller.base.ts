/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BatchJobService } from "../batchJob.service";
import { BatchJobCreateInput } from "./BatchJobCreateInput";
import { BatchJob } from "./BatchJob";
import { BatchJobFindManyArgs } from "./BatchJobFindManyArgs";
import { BatchJobWhereUniqueInput } from "./BatchJobWhereUniqueInput";
import { BatchJobUpdateInput } from "./BatchJobUpdateInput";

export class BatchJobControllerBase {
  constructor(protected readonly service: BatchJobService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BatchJob })
  async createBatchJob(
    @common.Body() data: BatchJobCreateInput
  ): Promise<BatchJob> {
    return await this.service.createBatchJob({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BatchJob] })
  @ApiNestedQuery(BatchJobFindManyArgs)
  async batchJobs(@common.Req() request: Request): Promise<BatchJob[]> {
    const args = plainToClass(BatchJobFindManyArgs, request.query);
    return this.service.batchJobs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BatchJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async batchJob(
    @common.Param() params: BatchJobWhereUniqueInput
  ): Promise<BatchJob | null> {
    const result = await this.service.batchJob({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BatchJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBatchJob(
    @common.Param() params: BatchJobWhereUniqueInput,
    @common.Body() data: BatchJobUpdateInput
  ): Promise<BatchJob | null> {
    try {
      return await this.service.updateBatchJob({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BatchJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBatchJob(
    @common.Param() params: BatchJobWhereUniqueInput
  ): Promise<BatchJob | null> {
    try {
      return await this.service.deleteBatchJob({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
