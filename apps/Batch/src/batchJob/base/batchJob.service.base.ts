/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BatchJob as PrismaBatchJob } from "@prisma/client";

export class BatchJobServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BatchJobCountArgs, "select">): Promise<number> {
    return this.prisma.batchJob.count(args);
  }

  async batchJobs(
    args: Prisma.BatchJobFindManyArgs
  ): Promise<PrismaBatchJob[]> {
    return this.prisma.batchJob.findMany(args);
  }
  async batchJob(
    args: Prisma.BatchJobFindUniqueArgs
  ): Promise<PrismaBatchJob | null> {
    return this.prisma.batchJob.findUnique(args);
  }
  async createBatchJob(
    args: Prisma.BatchJobCreateArgs
  ): Promise<PrismaBatchJob> {
    return this.prisma.batchJob.create(args);
  }
  async updateBatchJob(
    args: Prisma.BatchJobUpdateArgs
  ): Promise<PrismaBatchJob> {
    return this.prisma.batchJob.update(args);
  }
  async deleteBatchJob(
    args: Prisma.BatchJobDeleteArgs
  ): Promise<PrismaBatchJob> {
    return this.prisma.batchJob.delete(args);
  }
}
