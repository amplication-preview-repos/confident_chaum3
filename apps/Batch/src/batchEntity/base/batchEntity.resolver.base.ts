/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BatchEntity } from "./BatchEntity";
import { BatchEntityCountArgs } from "./BatchEntityCountArgs";
import { BatchEntityFindManyArgs } from "./BatchEntityFindManyArgs";
import { BatchEntityFindUniqueArgs } from "./BatchEntityFindUniqueArgs";
import { DeleteBatchEntityArgs } from "./DeleteBatchEntityArgs";
import { BatchEntityService } from "../batchEntity.service";
@graphql.Resolver(() => BatchEntity)
export class BatchEntityResolverBase {
  constructor(protected readonly service: BatchEntityService) {}

  async _batchEntitiesMeta(
    @graphql.Args() args: BatchEntityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BatchEntity])
  async batchEntities(
    @graphql.Args() args: BatchEntityFindManyArgs
  ): Promise<BatchEntity[]> {
    return this.service.batchEntities(args);
  }

  @graphql.Query(() => BatchEntity, { nullable: true })
  async batchEntity(
    @graphql.Args() args: BatchEntityFindUniqueArgs
  ): Promise<BatchEntity | null> {
    const result = await this.service.batchEntity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BatchEntity)
  async deleteBatchEntity(
    @graphql.Args() args: DeleteBatchEntityArgs
  ): Promise<BatchEntity | null> {
    try {
      return await this.service.deleteBatchEntity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
