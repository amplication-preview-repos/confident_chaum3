/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BatchEntity as PrismaBatchEntity } from "@prisma/client";

export class BatchEntityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BatchEntityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.batchEntity.count(args);
  }

  async batchEntities(
    args: Prisma.BatchEntityFindManyArgs
  ): Promise<PrismaBatchEntity[]> {
    return this.prisma.batchEntity.findMany(args);
  }
  async batchEntity(
    args: Prisma.BatchEntityFindUniqueArgs
  ): Promise<PrismaBatchEntity | null> {
    return this.prisma.batchEntity.findUnique(args);
  }
  async createBatchEntity(
    args: Prisma.BatchEntityCreateArgs
  ): Promise<PrismaBatchEntity> {
    return this.prisma.batchEntity.create(args);
  }
  async updateBatchEntity(
    args: Prisma.BatchEntityUpdateArgs
  ): Promise<PrismaBatchEntity> {
    return this.prisma.batchEntity.update(args);
  }
  async deleteBatchEntity(
    args: Prisma.BatchEntityDeleteArgs
  ): Promise<PrismaBatchEntity> {
    return this.prisma.batchEntity.delete(args);
  }
}
