/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExecutionBenchmarkService } from "../executionBenchmark.service";
import { ExecutionBenchmarkCreateInput } from "./ExecutionBenchmarkCreateInput";
import { ExecutionBenchmark } from "./ExecutionBenchmark";
import { ExecutionBenchmarkFindManyArgs } from "./ExecutionBenchmarkFindManyArgs";
import { ExecutionBenchmarkWhereUniqueInput } from "./ExecutionBenchmarkWhereUniqueInput";
import { ExecutionBenchmarkUpdateInput } from "./ExecutionBenchmarkUpdateInput";

export class ExecutionBenchmarkControllerBase {
  constructor(protected readonly service: ExecutionBenchmarkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExecutionBenchmark })
  async createExecutionBenchmark(
    @common.Body() data: ExecutionBenchmarkCreateInput
  ): Promise<ExecutionBenchmark> {
    return await this.service.createExecutionBenchmark({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ExecutionBenchmark] })
  @ApiNestedQuery(ExecutionBenchmarkFindManyArgs)
  async executionBenchmarks(
    @common.Req() request: Request
  ): Promise<ExecutionBenchmark[]> {
    const args = plainToClass(ExecutionBenchmarkFindManyArgs, request.query);
    return this.service.executionBenchmarks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExecutionBenchmark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async executionBenchmark(
    @common.Param() params: ExecutionBenchmarkWhereUniqueInput
  ): Promise<ExecutionBenchmark | null> {
    const result = await this.service.executionBenchmark({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExecutionBenchmark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExecutionBenchmark(
    @common.Param() params: ExecutionBenchmarkWhereUniqueInput,
    @common.Body() data: ExecutionBenchmarkUpdateInput
  ): Promise<ExecutionBenchmark | null> {
    try {
      return await this.service.updateExecutionBenchmark({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExecutionBenchmark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExecutionBenchmark(
    @common.Param() params: ExecutionBenchmarkWhereUniqueInput
  ): Promise<ExecutionBenchmark | null> {
    try {
      return await this.service.deleteExecutionBenchmark({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
