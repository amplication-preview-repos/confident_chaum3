/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ExecutionBenchmark } from "./ExecutionBenchmark";
import { ExecutionBenchmarkCountArgs } from "./ExecutionBenchmarkCountArgs";
import { ExecutionBenchmarkFindManyArgs } from "./ExecutionBenchmarkFindManyArgs";
import { ExecutionBenchmarkFindUniqueArgs } from "./ExecutionBenchmarkFindUniqueArgs";
import { DeleteExecutionBenchmarkArgs } from "./DeleteExecutionBenchmarkArgs";
import { ExecutionBenchmarkService } from "../executionBenchmark.service";
@graphql.Resolver(() => ExecutionBenchmark)
export class ExecutionBenchmarkResolverBase {
  constructor(protected readonly service: ExecutionBenchmarkService) {}

  async _executionBenchmarksMeta(
    @graphql.Args() args: ExecutionBenchmarkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ExecutionBenchmark])
  async executionBenchmarks(
    @graphql.Args() args: ExecutionBenchmarkFindManyArgs
  ): Promise<ExecutionBenchmark[]> {
    return this.service.executionBenchmarks(args);
  }

  @graphql.Query(() => ExecutionBenchmark, { nullable: true })
  async executionBenchmark(
    @graphql.Args() args: ExecutionBenchmarkFindUniqueArgs
  ): Promise<ExecutionBenchmark | null> {
    const result = await this.service.executionBenchmark(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ExecutionBenchmark)
  async deleteExecutionBenchmark(
    @graphql.Args() args: DeleteExecutionBenchmarkArgs
  ): Promise<ExecutionBenchmark | null> {
    try {
      return await this.service.deleteExecutionBenchmark(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
