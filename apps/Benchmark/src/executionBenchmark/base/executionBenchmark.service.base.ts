/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ExecutionBenchmark as PrismaExecutionBenchmark,
} from "@prisma/client";

export class ExecutionBenchmarkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExecutionBenchmarkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.executionBenchmark.count(args);
  }

  async executionBenchmarks(
    args: Prisma.ExecutionBenchmarkFindManyArgs
  ): Promise<PrismaExecutionBenchmark[]> {
    return this.prisma.executionBenchmark.findMany(args);
  }
  async executionBenchmark(
    args: Prisma.ExecutionBenchmarkFindUniqueArgs
  ): Promise<PrismaExecutionBenchmark | null> {
    return this.prisma.executionBenchmark.findUnique(args);
  }
  async createExecutionBenchmark(
    args: Prisma.ExecutionBenchmarkCreateArgs
  ): Promise<PrismaExecutionBenchmark> {
    return this.prisma.executionBenchmark.create(args);
  }
  async updateExecutionBenchmark(
    args: Prisma.ExecutionBenchmarkUpdateArgs
  ): Promise<PrismaExecutionBenchmark> {
    return this.prisma.executionBenchmark.update(args);
  }
  async deleteExecutionBenchmark(
    args: Prisma.ExecutionBenchmarkDeleteArgs
  ): Promise<PrismaExecutionBenchmark> {
    return this.prisma.executionBenchmark.delete(args);
  }
}
