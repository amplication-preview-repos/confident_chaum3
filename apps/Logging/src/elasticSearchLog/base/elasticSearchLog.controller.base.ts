/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ElasticSearchLogService } from "../elasticSearchLog.service";
import { ElasticSearchLogCreateInput } from "./ElasticSearchLogCreateInput";
import { ElasticSearchLog } from "./ElasticSearchLog";
import { ElasticSearchLogFindManyArgs } from "./ElasticSearchLogFindManyArgs";
import { ElasticSearchLogWhereUniqueInput } from "./ElasticSearchLogWhereUniqueInput";
import { ElasticSearchLogUpdateInput } from "./ElasticSearchLogUpdateInput";

export class ElasticSearchLogControllerBase {
  constructor(protected readonly service: ElasticSearchLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ElasticSearchLog })
  async createElasticSearchLog(
    @common.Body() data: ElasticSearchLogCreateInput
  ): Promise<ElasticSearchLog> {
    return await this.service.createElasticSearchLog({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ElasticSearchLog] })
  @ApiNestedQuery(ElasticSearchLogFindManyArgs)
  async elasticSearchLogs(
    @common.Req() request: Request
  ): Promise<ElasticSearchLog[]> {
    const args = plainToClass(ElasticSearchLogFindManyArgs, request.query);
    return this.service.elasticSearchLogs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ElasticSearchLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async elasticSearchLog(
    @common.Param() params: ElasticSearchLogWhereUniqueInput
  ): Promise<ElasticSearchLog | null> {
    const result = await this.service.elasticSearchLog({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ElasticSearchLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateElasticSearchLog(
    @common.Param() params: ElasticSearchLogWhereUniqueInput,
    @common.Body() data: ElasticSearchLogUpdateInput
  ): Promise<ElasticSearchLog | null> {
    try {
      return await this.service.updateElasticSearchLog({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ElasticSearchLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteElasticSearchLog(
    @common.Param() params: ElasticSearchLogWhereUniqueInput
  ): Promise<ElasticSearchLog | null> {
    try {
      return await this.service.deleteElasticSearchLog({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
