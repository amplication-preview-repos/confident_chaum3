/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ElasticSearchLog } from "./ElasticSearchLog";
import { ElasticSearchLogCountArgs } from "./ElasticSearchLogCountArgs";
import { ElasticSearchLogFindManyArgs } from "./ElasticSearchLogFindManyArgs";
import { ElasticSearchLogFindUniqueArgs } from "./ElasticSearchLogFindUniqueArgs";
import { DeleteElasticSearchLogArgs } from "./DeleteElasticSearchLogArgs";
import { ElasticSearchLogService } from "../elasticSearchLog.service";
@graphql.Resolver(() => ElasticSearchLog)
export class ElasticSearchLogResolverBase {
  constructor(protected readonly service: ElasticSearchLogService) {}

  async _elasticSearchLogsMeta(
    @graphql.Args() args: ElasticSearchLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ElasticSearchLog])
  async elasticSearchLogs(
    @graphql.Args() args: ElasticSearchLogFindManyArgs
  ): Promise<ElasticSearchLog[]> {
    return this.service.elasticSearchLogs(args);
  }

  @graphql.Query(() => ElasticSearchLog, { nullable: true })
  async elasticSearchLog(
    @graphql.Args() args: ElasticSearchLogFindUniqueArgs
  ): Promise<ElasticSearchLog | null> {
    const result = await this.service.elasticSearchLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ElasticSearchLog)
  async deleteElasticSearchLog(
    @graphql.Args() args: DeleteElasticSearchLogArgs
  ): Promise<ElasticSearchLog | null> {
    try {
      return await this.service.deleteElasticSearchLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
